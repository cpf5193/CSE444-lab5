package simpledb;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.NoSuchElementException;

public class EquiJoin extends Join {

	private static final long serialVersionUID = 1L;
	private JoinPredicate pred;
	private DbIterator child1;
	private DbIterator child2;
	private HashMap<Field, ArrayList<Tuple>> hashTable;
	private ArrayList<Tuple> buffer;
	private Tuple t1;
	private Tuple t2;
	
	public EquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2){
		this.pred = p;
		this.child1 = child1;
		this.child2 = child2;
		this.hashTable = null;
	}
	
	public JoinPredicate getJoinPredicate(){
		return pred;
	}
	
	public String getJoinField1Name() {
		return child1.getTupleDesc().getFieldName(pred.getField1());
	}
	
	public String getJoinField2Name() {
		return child2.getTupleDesc().getFieldName(pred.getField2());
	}
	
	public TupleDesc getTupleDesc() {
		return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
	}

	public void open() throws DbException, NoSuchElementException,
		TransactionAbortedException {
		child1.open();
		hashTable = new HashMap<Field, ArrayList<Tuple>>();
		while(child1.hasNext()){
			t1 = child1.next();
			Field compKey = t1.getField(pred.getField1());
			if(!hashTable.containsKey(compKey)){
				hashTable.put(compKey, new ArrayList<Tuple>(Arrays.asList(t1)));
			} else {
				ArrayList<Tuple> value = hashTable.get(compKey);
				value.add(t1);
				hashTable.put(compKey, value);
			}
		}
		child1.close();
		child2.open();
		buffer = null;
	}
	
	public void close() {
		child1.close();
		child2.close();
		hashTable.clear();
	}
	
	public void rewind() throws DbException, TransactionAbortedException {
		child1.rewind();
		child2.rewind();
	}
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	while(buffer == null || buffer.isEmpty()){
    		if(child2.hasNext()){
    			t2 = child2.next();
    			ArrayList<Tuple> temp = new ArrayList<Tuple>();
    			if(hashTable.containsKey(t2.getField(pred.getField2()))){
    				ArrayList<Tuple> field2Lookup = hashTable.get(t2.getField(pred.getField2()));
	    			if(field2Lookup != null){
	    				temp.addAll(field2Lookup);
	    				buffer = temp;
	    			}
    			}
    		} else {
    			return null; // end of the second relation
    		}
    	}
    	t1 = buffer.remove(buffer.size()-1);
    	return mergeTuples(t1.getTupleDesc().numFields(), 
    			t2.getTupleDesc().numFields(), t1, t2);
    }
    
    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = {child1, child2};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if(children.length != 2) {
        	throw new IllegalArgumentException("parameter array must have length 2");
        }
        this.child1 = children[0];
        this.child2 = children[1];
    }

    private Tuple mergeTuples(int length1, int length2, Tuple t1, Tuple t2) {
    	Tuple merged = new Tuple(this.getTupleDesc());
		int i;
		for(i = 0; i < length1; i++){
			merged.setField(i, t1.getField(i));
		}
		for(i = 0; i < length2; i++){
			merged.setField(i + length1, t2.getField(i));
		}
		return merged;
    }
}
