package simpledb;

public class LoopJoin extends Join {

	private static final long serialVersionUID = 1L;
	private JoinPredicate pred;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple previous;
	
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
	public LoopJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
		this.pred = p;
		this.child1 = child1;
		this.child2 = child2;
	}
	
	public JoinPredicate getJoinPredicate() {
		return pred;
	}
	
	 /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
	public String getJoinField1Name() {
		return child1.getTupleDesc().getFieldName(pred.getField1());
	}
	
	/**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
	public String getJoinField2Name() {
		return child2.getTupleDesc().getFieldName(pred.getField2());
	}
	
	public TupleDesc getTupleDesc() {
		return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
	}
	
	public void open() {
		try {
			child1.open();
			child2.open();
		} catch (DbException e) {
			e.printStackTrace();
		} catch (TransactionAbortedException e) {
			e.printStackTrace();
		}
	}
	
	public void close() {
		child1.close();
		child2.close();
	}
	
	public void rewind() {
		try {
			child1.rewind();
			child2.rewind();
		} catch (DbException e) {
			e.printStackTrace();
		} catch (TransactionAbortedException e) {
			e.printStackTrace();
		}
	}
	
	/**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	Tuple rightChild;
    	while (previous != null || child1.hasNext()) {
    		if (previous == null) previous = child1.next();
    		while (child2.hasNext()) {
    			rightChild = child2.next();
    			if (pred.filter(previous, rightChild))
    				return mergeTuples(previous.getTupleDesc().numFields(),
    					rightChild.getTupleDesc().numFields(), previous, rightChild);
    		}
    		child2.rewind();
    		previous = null;
    	}
    	return null;
    }
    
    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = {child1, child2};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if(children.length != 2) {
        	throw new IllegalArgumentException("parameter array must have length 2");
        }
        this.child1 = children[0];
        this.child2 = children[1];
    }

    private Tuple mergeTuples(int length1, int length2, Tuple t1, Tuple t2) {
    	Tuple merged = new Tuple(this.getTupleDesc());
		int i;
		for(i = 0; i < length1; i++){
			merged.setField(i, t1.getField(i));
		}
		for(i = 0; i < length2; i++){
			merged.setField(i + length1, t2.getField(i));
		}
		return merged;
    }
}
