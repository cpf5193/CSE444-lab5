package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private Join joinType;
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    	if(p.getOperator().equals(Predicate.Op.EQUALS)){
    		joinType = new EquiJoin(p, child1, child2);
    	} else {
    		joinType = new LoopJoin(p, child1, child2);
    	}
    }
    
    //Implicit super constructor
    public Join () {};

    public JoinPredicate getJoinPredicate() {
        return this.joinType.getJoinPredicate();
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return joinType.getJoinField1Name();
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return joinType.getJoinField2Name();
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return joinType.getTupleDesc(); 
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	super.open();
    	joinType.open();
        
    }

    public void close() {        
    	joinType.close();
    	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	joinType.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	return joinType.fetchNext();
    }

    @Override
    public DbIterator[] getChildren() {
    	return joinType.getChildren();
    }

    @Override
    public void setChildren(DbIterator[] children) {
    	joinType.setChildren(children);
    }
    
}
